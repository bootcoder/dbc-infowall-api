continue
!!!
ap a
ap cards
a.count
a = cards.uniq {|card| card.title}
cards.count
cards.uniq {|card| card.title}
cards.uniq
cards.count
cards.uniq!
cards.count
cards
continue
!!!
cards
continue
cards
continue
next
cards
exit
ap @ws[0].title.include?("CURRNT")
ap @ws[0].title.include?("CURRENT")
ap @ws[0].title
ap @ws[0].cells
@ws[0].cells
@ws.length
@ws[0].length
ap @ws[0].pretty_print_inspect
ap @ws[0].methods
ap @ws[0]
exit
ap deputy_schedule
exit
ap deputy_schedule
.clear
clear
p shift
next
p shift
next
p shift
next
p shift
next
p shift
next
ap shift
next
ap shift
p shift
exit
ap deputy_schedule
deputy_schedule
shift
exit
shift['EmployeeInfo']
exit
ap shift
next
ap shift
next
ap shift
index
exit
shift['StartTimeLocalized'].to_date > Date.today
shift['StartTimeLocalized'] > Date.today
shift['StartTimeLocalized']
shift.StartTimeLocalized
ap shift
shift
exit
ap @deputy_adapter.get_endpoint('/resource/Roster').first
ap @deputy_adapter.get_endpoint('/resource/Roster')
ap @deputy_adapter.get_endpoint('/resource/Roster').count
ap @deputy_adapter.get_endpoint('/resource/Roster')
ap @deputy_adapter.get_endpoint('/resource/roster')
ap @deputy_adapter.get_endpoint('/resource')
ap @deputy_adapter.get_endpoint('/resource/1')
ap @deputy_adapter.get_endpoint('/roster')
ap @deputy_adapter.get_endpoint('/resources/1')
ap @deputy_adapter.get_endpoint('/resources')
ap @deputy_adapter.get_endpoint('/')
@deputy_adapter.get_endpoint('/')
@deputy_adapter
exit
ap mentor
mentor
exit
ap mentor
mentor[0]
mentor
mentor['Company']
mentor{'Company']
mentor.keys
mentor
exit
!!!
ap event
event.attributes
event.keys
event
exit
event.schedule.today?
event.schedule
event
next
event.schedule.today?
event.schedule
ap event
event
