continue
event
name
continue
description.gsub!(/\(.*\)/, '').gsub!("\n", '')
description
continue
newDes = description.gsub(/\(.*\)/, '').gsub("\n", '')
desc = description.gsub(/\(.*\)/, '')
desc.to_s
desc = description.match(/\(.*\)/)
description
desc = description
new_description = description[description.index(')')..-1].gsub("\n", '')
new_description = description[description.index(')')..-1].gsub("\\n", '')
new_description = description[description.index(')')..-1].gsub('\\n', '')
new_description = description[description.index(')')..-1].gsub('\n', '')
new_description = description[description.index(')')..-1].gsub('\n
new_description = description[description.index(')')..-1].chomp
new_description = description[description.index(')')..-1]
description.index(')')
description.index('(')
description.indexOf('(')
description
continue
event.status
event.attributes
event.keys
event.description
ap event
event
continue
event
continue
!!!
event
description
event
exit
rand(0..1000)exit
rand(0..1000)
rand[0..1000]
rand(0..1000)
rand[0..1000]
ap card_hash.methods
card_hash.methods
count
ap methods
role
value
vlaue
index
exitindex
exit
results
exit
today
Date.parse(formatted_value).to_s
Date.parse(formatted_value).to_s == today
formatted_value
next
formatted_value
next
formatted_value
value
value += "/#{Date.today.year}"
value.match(/\d{4}/)
value
exit
@leads_worksheet.cells[root_cell]
exit
leads_worksheet[root_cell]
root_cell
exit
[day_root_cell[0], 2]
day_root_cell[0], 2
day_root_cell[0]
day_root_cell
exit
today
Date.parse(formatted_value).to_s == today
Date.parse(formatted_value).to_s
exit
continue
today
todya
Date.parse(formatted_value).to_s == today
Date.parse(formatted_value).to_s
Date.parse(formatted_value)
today
formatted_value == today
formatted_value
exit
continue
formatted_value
today
value
exit
value.match(/^\d{1,2}\/\d{1,2}$/)
value
next
value
next
value
next
value
exit
continue
value.match(/^\d{1,2}\/\d{1,2}\/\d{4}$/)
value
next
value
next
value
key
next
value
key
continue
contine
day_root_cell
next
continue
contine
@leads_worksheet.cells
@leads_worksheet.to_s
@leads_worksheet
continue
!!!
continue
!!!
ap a
ap cards
a.count
a = cards.uniq {|card| card.title}
cards.count
cards.uniq {|card| card.title}
cards.uniq
cards.count
cards.uniq!
cards.count
cards
continue
!!!
cards
continue
cards
continue
next
cards
exit
ap @ws[0].title.include?("CURRNT")
ap @ws[0].title.include?("CURRENT")
ap @ws[0].title
ap @ws[0].cells
@ws[0].cells
@ws.length
@ws[0].length
ap @ws[0].pretty_print_inspect
ap @ws[0].methods
ap @ws[0]
exit
ap deputy_schedule
exit
ap deputy_schedule
.clear
clear
p shift
next
p shift
next
p shift
next
p shift
next
p shift
next
ap shift
next
ap shift
p shift
exit
ap deputy_schedule
deputy_schedule
shift
exit
shift['EmployeeInfo']
exit
ap shift
next
ap shift
next
ap shift
index
exit
shift['StartTimeLocalized'].to_date > Date.today
shift['StartTimeLocalized'] > Date.today
shift['StartTimeLocalized']
shift.StartTimeLocalized
ap shift
shift
exit
ap @deputy_adapter.get_endpoint('/resource/Roster').first
ap @deputy_adapter.get_endpoint('/resource/Roster')
ap @deputy_adapter.get_endpoint('/resource/Roster').count
ap @deputy_adapter.get_endpoint('/resource/Roster')
ap @deputy_adapter.get_endpoint('/resource/roster')
ap @deputy_adapter.get_endpoint('/resource')
ap @deputy_adapter.get_endpoint('/resource/1')
ap @deputy_adapter.get_endpoint('/roster')
ap @deputy_adapter.get_endpoint('/resources/1')
ap @deputy_adapter.get_endpoint('/resources')
ap @deputy_adapter.get_endpoint('/')
@deputy_adapter.get_endpoint('/')
@deputy_adapter
exit
ap mentor
mentor
exit
ap mentor
mentor[0]
mentor
mentor['Company']
mentor{'Company']
mentor.keys
mentor
exit
!!!
ap event
event.attributes
event.keys
event
exit
event.schedule.today?
event.schedule
event
next
event.schedule.today?
event.schedule
ap event
event
